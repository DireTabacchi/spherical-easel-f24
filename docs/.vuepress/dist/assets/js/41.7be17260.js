(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{406:function(e,t,n){"use strict";n.r(t);var i=n(41),r=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("The function "),n("code",[e._v("Two::setSize(w,h)")]),e._v(" sets the "),n("code",[e._v("width")]),e._v(" and "),n("code",[e._v("height")]),e._v(" HTML attributes of the "),n("strong",[e._v("top-level")]),e._v(" "),n("code",[e._v("<svg>")]),e._v(" element to the given numbers. Calling this function is required when resizing TwoJS canvas.")]),e._v(" "),n("p",[e._v('The boundary circle is always rendered with its "ideal" radius ('),n("code",[e._v("SETTINGS.boundaryCircle.radius")]),e._v(") but scaled up/down upon\nwindow resize or split panel resize events. To avoid redrawing the entire scene, we use CSS "),n("code",[e._v("transform")]),e._v(" property and initialize it with the affine transformation matrix.")])])}),[],!1,null,null,null);t.default=r.exports}}]);